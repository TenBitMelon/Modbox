import type { Actions } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';
import { Octokit, RequestError } from 'octokit';
import { fromPromise } from 'neverthrow';
import { db, generateId, table } from '$lib/server/db';
import { eq } from 'drizzle-orm';

export const load: PageServerLoad = async ({ locals }) => {
	if (!locals.user) {
		return { modpacks: [] };
	}
	// Get all the modpacks for the current user
	const modpacks = await db
		.select()
		.from(table.modpack)
		.where(eq(table.modpack.creatorId, locals.user.id));
	return { modpacks };
};

export const actions: Actions = {
	createRepo: async ({ cookies, locals }) => {
		const { user } = locals;
		console.log(user);
		if (!user) {
			return { message: 'You must be logged in to create a repo', data: null };
		}

		console.log('creating a repo');

		const githubToken = user.githubToken;

		const octokit = new Octokit({
			auth: githubToken
		});

		const resp = await fromPromise(
			octokit.rest.repos.createForAuthenticatedUser({
				name: 'test-repo',
				description: 'A test repository generated by ModBox',
				auto_init: true
			}),
			(e) => e as RequestError
		);

		if (resp.isErr()) {
			const err = resp.error;

			return {
				message: `Error creating repo: ${err.status}, ${err.message}`,
				data: null
			};
		}

		return resp.value;
	},
	listRepos: async ({ locals }) => {
		const { user } = locals;
		if (!user) {
			return { message: 'You must be logged in to list repos', data: null };
		}

		const githubToken = user.githubToken;

		const octokit = new Octokit({
			auth: githubToken
		});

		const repos = await fromPromise(
			octokit.rest.repos.listForAuthenticatedUser({
				type: 'owner'
			}),
			(e) => e as RequestError
		);

		if (repos.isErr()) {
			const err = repos.error;
			return {
				message: `Error listing repos: ${err.status}, ${err.message}`,
				data: null
			};
		}

		return repos.value;
	},
	createModpack: async ({ cookies, locals, request }) => {
		const { user } = locals;
		if (!user) {
			return { message: 'You must be logged in to create a modpack', data: null };
		}

		const formData = await request.formData();
		const name = formData.get('name')?.toString();

		if (!name) {
			return { message: 'You must provide a name for the modpack', data: null };
		}

		const githubToken = user.githubToken;

		const octokit = new Octokit({
			auth: githubToken
		});

		// Create GitHub repository

		const modpackName = await fromPromise(
			octokit.rest.repos.createForAuthenticatedUser({
				name: name,
				description: 'A test modpack generated by ModBox',
				auto_init: true
			}),
			(e) => e as RequestError
		);

		if (modpackName.isErr()) {
			const err = modpackName.error;

			return {
				message: `Error creating modpack: ${err.status}, ${err.message}`,
				data: null
			};
		}

		// Create modpack in database

		await db.insert(table.modpack).values({
			id: generateId(),
			name: name,
			creatorId: user.id,
			mods: []
		});

		return modpackName.value;
	}
};
