import { db, table } from '$lib/server/db';
import { error, fail, redirect, type ActionFailure, type Actions } from '@sveltejs/kit';
import { fromPromise } from 'neverthrow';
import { Octokit, RequestError } from 'octokit';
import type { PageServerLoad } from '../$types';
import { createPackToml, parseGitHubUrl, slugify } from '$lib';
import { encodeBase64 } from '@oslojs/encoding';

export const load: PageServerLoad = async ({ locals }) => {
	if (!locals.user) {
		redirect(302, '/auth/sign-in');
	}
};

export const actions: Actions = {
	createModpack: async ({
		cookies,
		locals,
		request
	}): Promise<
		ActionFailure<{
			message: string;
			field: string | null;
		}>
	> => {
		const { user } = locals;
		if (!user)
			return fail(400, { message: 'You must be logged in to create a modpack', field: null });

		const formData = await request.formData();
		const name = formData.get('name')?.toString();
		const version = formData.get('version')?.toString();
		const loader = formData.get('loader')?.toString();

		if (!name)
			return fail(400, { message: 'You must provide a name for the modpack', field: 'name' });
		if (!version)
			return fail(400, { message: 'You must provide a version for the modpack', field: 'version' });
		if (!loader)
			return fail(400, { message: 'You must provide a loader for the modpack', field: 'loader' });

		const github = new Octokit({
			auth: user.githubToken
		});

		// Create GitHub repository
		const githubResp = await fromPromise(
			github.rest.repos.createForAuthenticatedUser({
				name: name,
				description: 'A test modpack generated by ModBox',
				auto_init: true
			}),
			(e) => e as RequestError
		);

		if (githubResp.isErr()) {
			const err = githubResp.error;

			return fail(400, {
				message: `Error creating modpack: ${err.status}, ${err.message}`,
				field: null
			});
		}

		const githubUrl = githubResp.value.data.html_url;
		const urlres = parseGitHubUrl(githubUrl);
		if (urlres.isErr()) error(500, { message: 'Invalid GitHub URL' });
		const { owner, repo } = urlres.value;

		const createFileResp = await fromPromise(
			github.rest.repos.createOrUpdateFileContents({
				owner: owner,
				repo: repo,
				path: 'pack.toml',
				message: 'Initial commit',
				branch: 'main',
				committer: {
					name: 'ModBox',
					email: 'modbox@modbox.com'
				},
				content: encodeBase64(
					new TextEncoder().encode(createPackToml(name, user.username, version, loader, version))
				)
			}),
			(e) => e as RequestError
		);

		// Create modpack in database
		const result = await fromPromise(
			db
				.insert(table.modpack)
				.values({
					slug: slugify(name),
					creatorId: user.id,
					name: name,
					description: `${name}. A Minecraft modpack.`,
					isPublic: true,
					loaderId: 'fabric',
					mcVersion: '1.20.1',
					githubUrl: githubUrl
				})
				.returning({
					insertedId: table.modpack.id
				}),
			(e) => e
		);

		if (result.isErr())
			return fail(400, {
				message: `Error creating modpack in database. ${result.error}`,
				field: null
			});

		const modpackId = result.value[0].insertedId;

		redirect(300, `/modpack/${modpackId}`);
	}
};
